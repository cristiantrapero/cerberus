<?xml version="1.0" encoding="UTF-8" ?>
<!-- This file was written by IceGrid Admin -->
<icegrid>
   <application name="Cerberus">
      <description>Access Control System for Smart Office.</description>
      <service-template id="IceStorm">
         <parameter name="instance-name" default="${application}.IceStorm"/>
         <parameter name="topic-manager-endpoints" default="default"/>
         <parameter name="publish-endpoints" default="default"/>
         <parameter name="flush-timeout" default="1000"/>
         <service name="${instance-name}" entry="IceStormService,36:createIceStorm">
            <properties>
               <property name="${service}.InstanceName" value="${instance-name}"/>
               <property name="${service}.Flush.Timeout" value="${flush-timeout}"/>
            </properties>
            <adapter name="${service}.Publish" endpoints="${publish-endpoints}" id="${instance-name}.Publish"/>
            <adapter name="${service}.TopicManager" endpoints="${topic-manager-endpoints}" id="${instance-name}.TopicManager">
               <object identity="${instance-name}/TopicManager" type="::IceStorm::TopicManager"/>
            </adapter>
            <dbenv name="${service}"/>
         </service>
      </service-template>
      <service-template id="IceStorm-HA">
         <parameter name="instance-name" default="${application}.IceStorm"/>
         <parameter name="node-id"/>
         <parameter name="topic-manager-endpoints" default="default"/>
         <parameter name="publish-endpoints" default="default"/>
         <parameter name="node-endpoints" default="default"/>
         <parameter name="flush-timeout" default="1000"/>
         <parameter name="publish-replica-group"/>
         <parameter name="topic-manager-replica-group"/>
         <service name="${instance-name}${node-id}" entry="IceStormService,36:createIceStorm">
            <properties>
               <property name="${service}.InstanceName" value="${instance-name}"/>
               <property name="${service}.NodeId" value="${node-id}"/>
               <property name="${service}.Flush.Timeout" value="${flush-timeout}"/>
            </properties>
            <adapter name="${service}.Node" endpoints="${node-endpoints}" id="${instance-name}${node-id}.Node"/>
            <adapter name="${service}.Publish" endpoints="${publish-endpoints}" id="${instance-name}${node-id}.Publish" replica-group="${publish-replica-group}"/>
            <adapter name="${service}.TopicManager" endpoints="${topic-manager-endpoints}" id="${instance-name}${node-id}.TopicManager" replica-group="${topic-manager-replica-group}"/>
            <dbenv name="${service}"/>
         </service>
      </service-template>
      <server-template id="Glacier2">
         <parameter name="instance-name" default="${application}.Glacier2"/>
         <parameter name="client-endpoints"/>
         <parameter name="server-endpoints" default=""/>
         <parameter name="session-timeout" default="0"/>
         <server id="${instance-name}" activation="always" exe="glacier2router">
            <properties>
               <property name="Glacier2.Client.Endpoints" value="${client-endpoints}"/>
               <property name="Glacier2.Server.Endpoints" value="${server-endpoints}"/>
               <property name="Glacier2.InstanceName" value="${instance-name}"/>
               <property name="Glacier2.SessionTimeout" value="${session-timeout}"/>
            </properties>
         </server>
      </server-template>
      <server-template id="IcePatch2">
         <parameter name="instance-name" default="${application}.IcePatch2"/>
         <parameter name="endpoints" default="default"/>
         <parameter name="directory"/>
         <server id="${instance-name}" activation="on-demand" application-distrib="false" exe="icepatch2server">
            <properties>
               <property name="IcePatch2.InstanceName" value="${instance-name}"/>
               <property name="IcePatch2.Directory" value="${directory}"/>
            </properties>
            <adapter name="IcePatch2" endpoints="${endpoints}" id="${server}.IcePatch2">
               <object identity="${instance-name}/server" type="::IcePatch2::FileServer"/>
            </adapter>
         </server>
      </server-template>
      <server-template id="IceStorm">
         <parameter name="instance-name" default="${application}.IceStorm"/>
         <parameter name="topic-manager-endpoints" default="default"/>
         <parameter name="publish-endpoints" default="default"/>
         <parameter name="flush-timeout" default="1000"/>
         <icebox id="${instance-name}" activation="on-demand" exe="icebox">
            <service-instance template="IceStorm" instance-name="${instance-name}" topic-manager-endpoints="${topic-manager-endpoints}" publish-endpoints="${publish-endpoints}" flush-timeout="${flush-timeout}"/>
         </icebox>
      </server-template>
      <server-template id="IceStorm-HA">
         <parameter name="instance-name" default="${application}.IceStorm"/>
         <parameter name="node-id"/>
         <parameter name="topic-manager-endpoints" default="default"/>
         <parameter name="publish-endpoints" default="default"/>
         <parameter name="node-endpoints" default="default"/>
         <parameter name="flush-timeout" default="1000"/>
         <parameter name="publish-replica-group"/>
         <parameter name="topic-manager-replica-group"/>
         <icebox id="${instance-name}${node-id}" activation="on-demand" exe="icebox">
            <service-instance template="IceStorm-HA" instance-name="${instance-name}" node-id="${node-id}" topic-manager-endpoints="${topic-manager-endpoints}" publish-endpoints="${publish-endpoints}" node-endpoints="${node-endpoints}" flush-timeout="${flush-timeout}" publish-replica-group="${publish-replica-group}" topic-manager-replica-group="${topic-manager-replica-group}"/>
         </icebox>
      </server-template>
      <node name="cerberus-pike">
         <description>Pike cerberus services.</description>
         <icebox id="IceBox" activation="always" exe="icebox">
            <properties>
               <property name="Ice.StdOut" value="/tmp/cerberus/icebox.out"/>
               <property name="Ice.StdErr" value="/tmp/cerberus/icebox.err"/>
               <property name="Icebox.PrintServicesReady" value="IceStorm"/>
            </properties>
            <service name="IceStorm" entry="IceStormService,36:createIceStorm">
               <properties>
                  <property name="Ice.StdOut" value="/tmp/cerberus/icestorm.out"/>
                  <property name="Ice.StdErr" value="/tmp/cerberus/icestorm.err"/>
                  <property name="Freeze.DbEnv.IceStorm.DbHome" value="/tmp/cerberus/db/icestorm"/>
               </properties>
               <adapter name="IceStorm.Publish" endpoints="default" id="${service}.Publish">
                  <object identity="IceStorm/Publish"/>
               </adapter>
               <adapter name="IceStorm.TopicManager" endpoints="default" id="${service}.TopicManager">
                  <object identity="IceStorm/TopicManager"/>
               </adapter>
            </service>
         </icebox>
         <server id="PersonRecognizer" activation="always" exe="python3" pwd="./services/person-recognizer/src">
            <option>server.py</option>
            <properties>
               <property name="Ice.StdErr" value="/tmp/cerberus/person_recognizer.err"/>
               <property name="Ice.StdOut" value="/tmp/cerberus/person_recognizer.out"/>
            </properties>
            <adapter name="Adapter" endpoints="default" id="${server}.Adapter">
               <object identity="person-recognizer"/>
            </adapter>
         </server>
         <server id="PropertyServer" activation="always" exe="property-server">
            <properties>
               <property name="Ice.StdErr" value="/tmp/cerberus/property-service.err"/>
               <property name="Ice.StdOut" value="/tmp/cerberus/property-service.out"/>
               <property name="PropertyService.Data" value="/tmp/cerberus/db/property-service"/>
               <property name="Ice.ThreadPool.Server.Size" value="10"/>
            </properties>
            <adapter name="PropertyServiceAdapter" endpoints="default" id="${server}.PropertyServiceAdapter">
               <object identity="PropertyServer"/>
            </adapter>
         </server>
         <server id="SconeWrapper" activation="always" exe="scone-wrapper" pwd="./">
            <properties>
               <property name="Ice.StdOut" value="/tmp/cerberus/scone-wrapper.out"/>
               <property name="Ice.StdErr" value="/tmp/cerberus/scone-wrapper.err"/>
            </properties>
            <adapter name="Adapter" endpoints="default" id="${server}.Adapter">
               <object identity="scone"/>
            </adapter>
         </server>
         <server id="SpeechToText" activation="always" exe="python3" pwd="./services/speech-to-text/src">
            <option>server.py</option>
            <properties>
               <property name="Ice.StdErr" value="/tmp/cerberus/speech_to_text.err"/>
               <property name="Ice.StdOut" value="/tmp/cerberus/speech_to_text.out"/>
               <property name="SpeechToText.IBMusername" value="ef4417e7-cb37-4898-a457-2a8d9f255d89"/>
               <property name="SpeechToText.IBMpassword" value="ETRMgWLYmtKj"/>
            </properties>
            <adapter name="Adapter" endpoints="default" id="${server}.Adapter">
               <object identity="speech-to-text"/>
            </adapter>
         </server>
         <server id="WiringService" activation="always" exe="citisim-wiring">
            <properties>
               <property name="Ice.StdErr" value="/tmp/cerberus/wiring-service.err"/>
               <property name="Ice.StdOut" value="/tmp/cerberus/wiring-service.out"/>
               <property name="IceStorm.TopicManager.Proxy" value="IceStorm/TopicManager"/>
               <property name="PropertyService.Proxy" value="PropertyServer"/>
            </properties>
            <adapter name="Adapter" endpoints="default" id="${server}.Adapter">
               <object identity="WiringService"/>
            </adapter>
         </server>
      </node>
      <node name="cerberus-rpi">
         <description>Raspberry Pi cerberus services.</description>
         <server id="AuthenticatedCommandService" activation="always" exe="python3" pwd="./services/authenticator/src">
            <option>server.py</option>
            <properties>
               <property name="Ice.StdOut" value="/tmp/cerberus/authenticator.out"/>
               <property name="Ice.StdErr" value="/tmp/cerberus/authenticator.err"/>
            </properties>
            <adapter name="Adapter" endpoints="default" id="${server}.Adapter">
               <object identity="authenticator"/>
            </adapter>
         </server>
         <server id="ClipService" activation="always" exe="python3" pwd="./services/clip-service/src">
            <option>server.py</option>
            <properties>
               <property name="Ice.StdErr" value="/tmp/cerberus/clip_service.err"/>
               <property name="Ice.StdOut" value="/tmp/cerberus/clip_service.out"/>
               <property name="ClipService.RecordTime" value="5"/>
               <property name="ClipService.Place" value="ITSI-corridor"/>
            </properties>
            <adapter name="Adapter" endpoints="default" id="${server}.Adapter">
               <object identity="clip-service"/>
            </adapter>
         </server>
         <server id="MotionSensor" activation="always" exe="python3" pwd="./services/motion-sensor/src">
            <option>server.py</option>
            <properties>
               <property name="Ice.StdErr" value="/tmp/cerberus/motion_sensor.err"/>
               <property name="Ice.StdOut" value="/tmp/cerberus/motion_sensor.out"/>
               <property name="MotionSensor.MonitoredDirectory" value="/home/pi/C1_00626E6F30CC"/>
               <property name="MotionSensor.Quality" value="255"/>
               <property name="MotionSensor.Expiration" value="30"/>
               <property name="MotionSensor.Latitude" value="38.99793"/>
               <property name="MotionSensor.Longitude" value="-3.919898"/>
               <property name="MotionSensor.Altitude" value="637.10"/>
               <property name="MotionSensor.Place" value="ITSI-corridor"/>
            </properties>
            <adapter name="Adapter" endpoints="default" id="${server}.Adapter">
               <object identity="motion-sensor"/>
            </adapter>
         </server>
         <server id="SnapshotService" activation="always" exe="python3" pwd="./services/snapshot-service/src">
            <option>server.py</option>
            <properties>
               <property name="Ice.StdErr" value="/tmp/cerberus/snapshot_service.err"/>
               <property name="Ice.StdOut" value="/tmp/cerberus/snapshot_service.out"/>
               <property name="SnapshotService.Snapshots" value="1"/>
               <property name="SnapshotService.Delay" value="0"/>
               <property name="SnapshotService.CameraIP" value="161.67.106.69"/>
               <property name="SnapshotService.CameraUser" value="arco"/>
               <property name="SnapshotService.CameraPass" value="ARCOcamC1."/>
               <property name="SnapshotService.Place" value="ITSI-corridor"/>
            </properties>
            <adapter name="Adapter" endpoints="default" id="${server}.Adapter">
               <object identity="snapshot-service"/>
            </adapter>
         </server>
      </node>
   </application>
</icegrid>
